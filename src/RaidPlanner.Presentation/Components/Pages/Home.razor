@page "/"

@inject IMediator _mediator

<PageTitle>WoW Raid Planner - Home</PageTitle>

<div class="row">
  <div class="col-4">
    <PlayerView Players="_players"></PlayerView>
  </div>
  <div class="col-8">
    <div class="row">
      <div class="col-4"><RolesView Players="_playerDto"></RolesView></div>
      <div class="col-4"><MajorBuffDebuffView Players="_playerDto"></MajorBuffDebuffView></div>
      <div class="col-4"><CooldownProfileView Players="_playerDto"></CooldownProfileView></div>
    </div>
    <div class="row">
      <div class="col-4"><ClassView Players="_playerDto"></ClassView></div>
      <div class="col-4"><MajorUtilitiesView Players="_playerDto"></MajorUtilitiesView></div>
      <div class="col-4"><MinorUtilitiesView Players="_playerDto"></MinorUtilitiesView></div>
    </div>
    <div class="row">
      <div class="col-4"><TierTokenView Players="_playerDto"></TierTokenView></div>
      <div class="col-4"></div>
      <div class="col-4"></div>
    </div>
  </div>
</div>

@code
{
  private IEnumerable<Class> _classes = [];
  private IEnumerable<Player> _players = [];
  private IEnumerable<SimplePlayerDto> _playerDto = [];

  protected override async Task OnInitializedAsync()
  {
    _classes = await _mediator.Send(new GetClassesQuery());
    _players = await _mediator.Send(new GetPlayersQuery());
    _playerDto = GetSimplePlayers(_players);
  }

  private IEnumerable<SimplePlayerDto> GetSimplePlayers(IEnumerable<Player> players)
  {
    var result = new List<SimplePlayerDto>();

    foreach (var player in players)
    {
      var playerClass = player.Characters.First(character => character.IsMain);

      result.Add(new SimplePlayerDto
        {
          Name = player.Name,
          Class = playerClass.Class,
          Spec = playerClass.MainSpec,
          Role = _classes.First(c => c.Indentity == playerClass.Class).Specializations.First(s => s.Indentity == playerClass.MainSpec).Role
        });
    }

    return result;
  }
}